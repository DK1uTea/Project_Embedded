// First define your Blynk configuration
#define BLYNK_TEMPLATE_ID "TMPL6GPaA0o6d"
#define BLYNK_TEMPLATE_NAME "Fall Detection"
#define BLYNK_AUTH_TOKEN "DxmxA1ZfX5Z-xiiqiN2etguKkYRx7zdi"
#define BLYNK_PRINT Serial             // In log Blynk qua Serial

// Then include the libraries
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>  // Include Blynk library after defining template ID and name

// ==== PINS CONFIGURATION ====
#define BUZZER_PIN 14        // Ch√¢n c√≤i k·∫øt n·ªëi v·ªõi c·ªïng 14
#define BUTTON_PIN 12        // Ch√¢n n√∫t nh·∫•n k·∫øt n·ªëi v·ªõi c·ªïng 12

// ==== BLYNK CONFIGURATION ====
char auth[] = BLYNK_AUTH_TOKEN;        // Blynk Auth Token
char ssid[] = "Asus";                  // T√™n WiFi c·ªßa b·∫°n
char pass[] = "trangckun";             // M·∫≠t kh·∫©u WiFi

// Bi·∫øn theo d√µi k·∫øt n·ªëi
bool isWifiConnected = false;
bool isBlynkConnected = false;
unsigned long lastConnectionAttempt = 0;
const unsigned long reconnectInterval = 30000; // 30 gi√¢y gi·ªØa c√°c l·∫ßn th·ª≠ k·∫øt n·ªëi l·∫°i

// Virtual pin ƒë·ªÉ g·ª≠i th√¥ng b√°o
#define VPIN_FALL_DETECTION V0
#define VPIN_SYSTEM_STATUS V1
#define VPIN_ACCEL_TOTAL V3
#define VPIN_GYRO_TOTAL  V4
#define VPIN_FALL_DETAIL V5

// ==== MPU6050 CONFIGURATION ====
Adafruit_MPU6050 mpu;

// Ng∆∞·ª°ng ph√°t hi·ªán t√© ng√£
const float GRAVITY = 9.81;           // Gia t·ªëc tr·ªçng tr∆∞·ªùng
const float fallThreshold = 15.0;     // Ng∆∞·ª°ng gia t·ªëc (so v·ªõi tr·ªçng l·ª±c)
const float gyroThreshold = 3.0;      // Ng∆∞·ª°ng t·ªëc ƒë·ªô quay

// Bi·∫øn ƒë·ªÉ l∆∞u gi√° tr·ªã t·ªëi ƒëa cho m·ª•c ƒë√≠ch ki·ªÉm tra
float maxAcceleration = 0;
float maxGyro = 0;

// Bi·∫øn tr·∫°ng th√°i
bool fallDetected = false;        // Bi·∫øn c·ªù ƒë·ªÉ theo d√µi t√© ng√£
unsigned long fallDetectedTime = 0;
const unsigned long resetTimeout = 60000;
bool alarmActive = false;         // Bi·∫øn theo d√µi tr·∫°ng th√°i c√≤i b√°o ƒë·ªông
bool testMode = true;             // Ch·∫ø ƒë·ªô ki·ªÉm tra - hi·ªÉn th·ªã th√¥ng tin debug

// Bi·∫øn x·ª≠ l√Ω c√≤i
unsigned long alarmStartTime = 0;
const unsigned long alarmDuration = 10000;  // Th·ªùi gian c√≤i k√™u t·ªëi ƒëa (10 gi√¢y)

// Bi·∫øn x·ª≠ l√Ω n√∫t nh·∫•n
int lastButtonState = HIGH;       // Tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ c·ªßa n√∫t
unsigned long lastButtonPressTime = 0; // Th·ªùi ƒëi·ªÉm nh·∫•n n√∫t cu·ªëi c√πng

// Blynk connected callback
BLYNK_CONNECTED() {
  isBlynkConnected = true;
  Serial.println("‚úÖ BLYNK ƒê√É K·∫æT N·ªêI TH√ÄNH C√îNG!");
  
  // ƒê·ªìng b·ªô tr·∫°ng th√°i v·ªõi app khi k·∫øt n·ªëi l·∫°i
  Blynk.virtualWrite(VPIN_SYSTEM_STATUS, "Thi·∫øt b·ªã tr·ª±c tuy·∫øn");
  
  // N·∫øu ƒëang c√≥ c·∫£nh b√°o t√© ng√£, g·ª≠i l·∫°i th√¥ng b√°o
  if (fallDetected) {
    Blynk.virtualWrite(VPIN_FALL_DETECTION, "‚ö†Ô∏è T√â NG√É ƒê∆Ø·ª¢C PH√ÅT HI·ªÜN!");
    Blynk.logEvent("fall", "Ph√°t hi·ªán t√© ng√£ l√∫c " + String(millis()/1000) + "s k·ªÉ t·ª´ khi kh·ªüi ƒë·ªông");
  }
}

void setup() {
  Serial.begin(115200);
  delay(100);

  Serial.println("\n------------------------------------");
  Serial.println("üîÑ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG PH√ÅT HI·ªÜN T√â NG√É");
  Serial.println("------------------------------------");

  // C√†i ƒë·∫∑t ch√¢n GPIO
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  digitalWrite(BUZZER_PIN, LOW);
  Serial.println("‚úì ƒê√£ c√†i ƒë·∫∑t GPIO: C√≤i (14), N√∫t nh·∫•n (12)");

  Wire.begin(2, 15);
  Serial.println("‚úì I2C ƒë∆∞·ª£c kh·ªüi t·∫°o tr√™n SDA=2, SCL=15");

  // Kh·ªüi t·∫°o MPU6050
  Serial.print("‚è≥ ƒêang kh·ªüi t·∫°o MPU6050... ");
  if (!mpu.begin()) {
    Serial.println("‚ùå KH√îNG T√åM TH·∫§Y MPU6050!");
    Serial.println("   Ki·ªÉm tra k·∫øt n·ªëi ph·∫ßn c·ª©ng.");
    while (1) {
      digitalWrite(BUZZER_PIN, HIGH);
      delay(300);
      digitalWrite(BUZZER_PIN, LOW);
      delay(300);
    }
  }
  Serial.println("‚úÖ MPU6050 ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!");
  
  // K·∫øt n·ªëi WiFi v√† Blynk
  connectToNetwork();
  
  // Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh
  Serial.println("\n--- C·∫§U H√åNH H·ªÜ TH·ªêNG ---");
  Serial.println("‚Ä¢ WiFi: " + String(ssid));
  Serial.println("‚Ä¢ Blynk Template ID: " + String(BLYNK_TEMPLATE_ID));
  Serial.println("‚Ä¢ Blynk Template Name: " + String(BLYNK_TEMPLATE_NAME));
  Serial.println("‚Ä¢ Ng∆∞·ª°ng gia t·ªëc: " + String(fallThreshold) + " m/s¬≤");
  Serial.println("‚Ä¢ Ng∆∞·ª°ng gyro: " + String(gyroThreshold) + " rad/s");
  Serial.println("------------------------------------");
}

void loop() {
  // Ki·ªÉm tra v√† duy tr√¨ k·∫øt n·ªëi
  checkConnection();
  
  // Ch·ªâ ch·∫°y Blynk.run() khi c√≥ k·∫øt n·ªëi WiFi
  if (isWifiConnected) {
    Blynk.run();
  }

  // ƒê·ªçc tr·∫°ng th√°i n√∫t nh·∫•n
  int buttonState = digitalRead(BUTTON_PIN);
  
  // X·ª≠ l√Ω khi n√∫t thay ƒë·ªïi tr·∫°ng th√°i
  if (buttonState != lastButtonState) {
    Serial.println("Tr·∫°ng th√°i n√∫t: " + String(buttonState == LOW ? "NH·∫§N" : "NH·∫¢"));
    lastButtonState = buttonState;
    
    // Khi n√∫t ƒë∆∞·ª£c nh·∫•n (LOW v·ªõi INPUT_PULLUP)
    if (buttonState == LOW) {
      lastButtonPressTime = millis();
      
      // T·∫Øt c√≤i n·∫øu ƒëang k√≠ch ho·∫°t
      if (alarmActive) {
        Serial.println("N√öT NH·∫§N ƒê∆Ø·ª¢C PH√ÅT HI·ªÜN - T·∫ÆT C√íI!");
        deactivateAlarm();
      }
    }
  }
  
  // Qu·∫£n l√Ω c√≤i b√°o ƒë·ªông
  if (alarmActive && (millis() - alarmStartTime > alarmDuration)) {
    deactivateAlarm();
    Serial.println("C√≤i b√°o ƒë·ªông ƒë√£ t·ª± ƒë·ªông t·∫Øt sau " + String(alarmDuration/1000) + " gi√¢y.");
  }

  // ƒê·ªçc d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn
  sensors_event_t accel, gyro, temp;
  mpu.getEvent(&accel, &gyro, &temp);

  // T√≠nh t·ªïng vector gia t·ªëc v√† t·ªëc ƒë·ªô quay
  float totalAcceleration = sqrt(
    pow(accel.acceleration.x, 2) +
    pow(accel.acceleration.y, 2) +
    pow(accel.acceleration.z, 2)
  );

  float totalGyro = sqrt(
    pow(gyro.gyro.x, 2) +
    pow(gyro.gyro.y, 2) +
    pow(gyro.gyro.z, 2)
  );

  // T√≠nh s·ª± thay ƒë·ªïi gia t·ªëc (lo·∫°i b·ªè tr·ªçng l·ª±c)
  float accelerationChange = abs(totalAcceleration - GRAVITY);

  Blynk.virtualWrite(VPIN_ACCEL_TOTAL, totalAcceleration);
  Blynk.virtualWrite(VPIN_GYRO_TOTAL, totalGyro);

  // C·∫≠p nh·∫≠t gi√° tr·ªã t·ªëi ƒëa
  if (totalAcceleration > maxAcceleration) maxAcceleration = totalAcceleration;
  if (totalGyro > maxGyro) maxGyro = totalGyro;

  // In ra th√¥ng tin debug trong ch·∫ø ƒë·ªô ki·ªÉm tra
  if (testMode) {
    // In chi ti·∫øt gia t·ªëc t·ª´ng tr·ª•c
    Serial.print("Accel (m/s^2) -> X: "); Serial.print(accel.acceleration.x, 3);
    Serial.print(" Y: "); Serial.print(accel.acceleration.y, 3);
    Serial.print(" Z: "); Serial.println(accel.acceleration.z, 3);

    // In chi ti·∫øt gyro t·ª´ng tr·ª•c
    Serial.print("Gyro (rad/s) -> X: "); Serial.print(gyro.gyro.x, 3);
    Serial.print(" Y: "); Serial.print(gyro.gyro.y, 3);
    Serial.print(" Z: "); Serial.println(gyro.gyro.z, 3);

    // In ra th√¥ng tin t·ªïng v√† % ng∆∞·ª°ng
    Serial.print("T·ªïng gia t·ªëc: ");
    Serial.print(totalAcceleration, 3);
    Serial.print(" m/s^2 (");
    Serial.print(int(totalAcceleration/fallThreshold*100));
    Serial.print("% ng∆∞·ª°ng), T·ªïng gyro: ");
    Serial.print(totalGyro, 3);
    Serial.print(" rad/s (");
    Serial.print(int(totalGyro/gyroThreshold*100));
    Serial.println("% ng∆∞·ª°ng)");
    
    // Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng
    Serial.print("Tr·∫°ng th√°i: ");
    Serial.print(fallDetected ? "ƒê√£ ph√°t hi·ªán t√© ng√£, " : "B√¨nh th∆∞·ªùng, ");
    Serial.print(alarmActive ? "C√≤i B·∫¨T, " : "C√≤i T·∫ÆT, ");
    Serial.println(isBlynkConnected ? "Blynk k·∫øt n·ªëi OK" : "Blynk KH√îNG k·∫øt n·ªëi");
  }

  // T·ª± ƒë·ªông reset tr·∫°ng th√°i sau m·ªôt th·ªùi gian
  if (fallDetected && (millis() - fallDetectedTime > resetTimeout)) {
    Serial.println("‚è±Ô∏è T·ª± ƒë·ªông reset tr·∫°ng th√°i t√© ng√£ sau 60 gi√¢y");
    fallDetected = false;
    if (isBlynkConnected) {
      Blynk.virtualWrite(VPIN_FALL_DETECTION, "Tr·∫°ng th√°i b√¨nh th∆∞·ªùng");
    }
  }

  // Ph√°t hi·ªán t√© ng√£
  if (accelerationChange > fallThreshold && totalGyro > gyroThreshold && !fallDetected) {
    Serial.println("\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è T√â NG√É ƒê∆Ø·ª¢C PH√ÅT HI·ªÜN! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è");
    Serial.print("Bi·∫øn ƒë·ªïi gia t·ªëc: "); Serial.print(accelerationChange); 
    Serial.print(" m/s^2 (ng∆∞·ª°ng: "); Serial.print(fallThreshold); Serial.println(" m/s^2)");
    Serial.print("Gyro: "); Serial.print(totalGyro); 
    Serial.print(" rad/s (ng∆∞·ª°ng: "); Serial.print(gyroThreshold); Serial.println(" rad/s)");
    
    // K√≠ch ho·∫°t c√≤i b√°o ƒë·ªông
    activateAlarm();
    
    fallDetected = true;
    fallDetectedTime = millis(); // Ghi nh·ªõ th·ªùi ƒëi·ªÉm ph√°t hi·ªán t√© ng√£

    // G·ª≠i th√¥ng b√°o ƒë·∫øn Blynk n·∫øu ƒë√£ k·∫øt n·ªëi
    if (isBlynkConnected) {
      Serial.println("üì≤ ƒêang g·ª≠i th√¥ng b√°o t√© ng√£ qua Blynk...");

      // T·∫°o ID ng·∫´u nhi√™n v√† th√¥ng tin th·ªùi gian ƒë·ªÉ t·∫°o s·ª± kh√°c bi·ªát
      String eventID = String(random(10000, 99999));
      unsigned long currentTime = millis() / 1000;
      String timestamp = String(currentTime);
      
      // T·∫°o th√¥ng b√°o chi ti·∫øt
      String eventMsg = "‚ö†Ô∏è T√â NG√É #" + eventID + " | " + timestamp + "\n" +
                       "‚Ä¢ Gia t·ªëc: " + String(accelerationChange, 1) + " m/s¬≤ (" + 
                       String(int(accelerationChange/fallThreshold*100)) + "%)\n" +
                       "‚Ä¢ Gyro: " + String(totalGyro, 1) + " rad/s";

      Blynk.virtualWrite(VPIN_FALL_DETECTION, "‚ö†Ô∏è T√â NG√É ƒê∆Ø·ª¢C PH√ÅT HI·ªÜN!");
      Blynk.logEvent("fall", eventMsg);
      Serial.println("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn Blynk: " + eventMsg);

      // --- Ghi nh·∫≠n chi ti·∫øt v√†o Terminal/Label widget ---
      String detailMsg = 
        "T√© ng√£ #" + eventID + " [" + timestamp + "s]\n"
        "Accel: X=" + String(accel.acceleration.x,2) +
        " Y=" + String(accel.acceleration.y,2) +
        " Z=" + String(accel.acceleration.z,2) + "\n"
        "Gyro: X=" + String(gyro.gyro.x,2) +
        " Y=" + String(gyro.gyro.y,2) +
        " Z=" + String(gyro.gyro.z,2) + "\n"
        "A|G=" + String(accelerationChange,1) + "|" + String(totalGyro,1);

      Blynk.virtualWrite(VPIN_FALL_DETAIL, detailMsg); // V5, d√πng cho Terminal/Label widget
      Serial.println("‚úÖ ƒê√£ ghi nh·∫≠t k√Ω chi ti·∫øt t√© ng√£: " + detailMsg);
    } else {
      Serial.println("‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o (Blynk ch∆∞a k·∫øt n·ªëi)");
    }
  } 
  else if (accelerationChange < fallThreshold * 0.3 && totalGyro < gyroThreshold * 0.3) {
    // Reset khi c·∫£ hai ƒë·ªÅu gi·∫£m ƒë√°ng k·ªÉ
    if (fallDetected) {
      Serial.println("\nT√¨nh tr·∫°ng b√¨nh th∆∞·ªùng tr·ªü l·∫°i.");
      fallDetected = false;
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr√™n Blynk n·∫øu ƒë√£ k·∫øt n·ªëi
      if (isBlynkConnected) {
        Blynk.virtualWrite(VPIN_FALL_DETECTION, "B√¨nh th∆∞·ªùng");
      }
    }
    
    // Hi·ªÉn th·ªã tr·∫°ng th√°i b√¨nh th∆∞·ªùng
    if (accelerationChange < 1.0 && totalGyro < 0.5) {
      Serial.println("T√¨nh tr·∫°ng b√¨nh th∆∞·ªùng.");
    }
  } else {
    // C√°c tr·∫°ng th√°i trung gian
    if (!fallDetected) {
      if (accelerationChange > fallThreshold * 0.7 || totalGyro > gyroThreshold * 0.7) {
        Serial.println("ƒêang g·∫ßn t·ªõi ng∆∞·ª°ng t√© ng√£...");
      } else if (accelerationChange > fallThreshold * 0.4 || totalGyro > gyroThreshold * 0.4) {
        Serial.println("C√≥ chuy·ªÉn ƒë·ªông ƒë√°ng ch√∫ √Ω.");
      } else {
        Serial.println("Chuy·ªÉn ƒë·ªông nh·∫π.");
      }
    } else {
      Serial.println("ƒêang theo d√µi sau t√© ng√£.");
    }
  }

  Serial.println("------------------------------");
  delay(100);
}

// H√†m k√≠ch ho·∫°t c√≤i b√°o ƒë·ªông
void activateAlarm() {
  alarmActive = true;
  alarmStartTime = millis();
  digitalWrite(BUZZER_PIN, HIGH);
  Serial.println("üîä C√íI B√ÅO ƒê·ªòNG ƒê√É K√çCH HO·∫†T!");
}

// H√†m t·∫Øt c√≤i b√°o ƒë·ªông
void deactivateAlarm() {
  alarmActive = false;
  digitalWrite(BUZZER_PIN, LOW);
  Serial.println("üîá C√≤i b√°o ƒë·ªông ƒë√£ t·∫Øt.");
}

// H√†m k·∫øt n·ªëi WiFi v√† Blynk
// H√†m k·∫øt n·ªëi WiFi v√† Blynk v·ªõi th√™m nhi·ªÅu delay ƒë·ªÉ quan s√°t log
void connectToNetwork() {
  Serial.println("\n------------------------------------");
  Serial.println("‚è≥ B·∫ÆT ƒê·∫¶U QU√Å TR√åNH K·∫æT N·ªêI M·∫†NG");
  Serial.println("------------------------------------");
  delay(1000); // Delay 1 gi√¢y ƒë·ªÉ quan s√°t log
  
  // === GIAI ƒêO·∫†N 1: CHU·∫®N B·ªä K·∫æT N·ªêI WIFI ===
  Serial.println("GIAI ƒêO·∫†N 1: Chu·∫©n b·ªã k·∫øt n·ªëi WiFi");
  Serial.println("‚Ä¢ SSID: " + String(ssid));
  Serial.println("‚Ä¢ M·∫≠t kh·∫©u: ********");
  Serial.print("‚Ä¢ ƒêang chu·∫©n b·ªã... ");
  
  for (int i = 3; i > 0; i--) {
    Serial.print(String(i) + "... ");
    delay(1000); // ƒê·∫øm ng∆∞·ª£c 3 gi√¢y
  }
  Serial.println("B·∫ÆT ƒê·∫¶U!");
  
  // === GIAI ƒêO·∫†N 2: K·∫æT N·ªêI WIFI ===
  Serial.println("\nGIAI ƒêO·∫†N 2: ƒêang k·∫øt n·ªëi WiFi");
  WiFi.begin(ssid, pass);
  
  // ƒê·ª£i k·∫øt n·ªëi WiFi v·ªõi ƒë·∫øm th·ªùi gian
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    if (attempts % 10 == 9) Serial.println(); // Xu·ªëng d√≤ng sau m·ªói 10 d·∫•u ch·∫•m
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    isWifiConnected = true;
    Serial.println("\n‚úÖ WIFI ƒê√É K·∫æT N·ªêI TH√ÄNH C√îNG!");
    Serial.println("‚Ä¢ ƒê·ªãa ch·ªâ IP: " + WiFi.localIP().toString());
    Serial.println("‚Ä¢ C∆∞·ªùng ƒë·ªô t√≠n hi·ªáu: " + String(WiFi.RSSI()) + " dBm");
    Serial.println("‚Ä¢ MAC Address: " + WiFi.macAddress());
    
    // Delay ƒë·ªÉ quan s√°t th√¥ng tin WiFi
    Serial.println("‚Ä¢ ƒê·ª£i 3 gi√¢y tr∆∞·ªõc khi k·∫øt n·ªëi Blynk...");
    for (int i = 3; i > 0; i--) {
      Serial.print(String(i) + "... ");
      delay(1000);
    }
    Serial.println("Ti·∫øp t·ª•c!");
    
    // === GIAI ƒêO·∫†N 3: K·∫æT N·ªêI BLYNK ===
    Serial.println("\nGIAI ƒêO·∫†N 3: ƒêang k·∫øt n·ªëi Blynk");
    Serial.println("‚Ä¢ Auth Token: " + String(auth));
    Serial.println("‚Ä¢ Server m·∫∑c ƒë·ªãnh: blynk.cloud");
    Serial.print("‚Ä¢ ƒêang k·∫øt n·ªëi");
    
    Blynk.config(auth);
    
    // ƒê·∫øm ng∆∞·ª£c v·ªõi d·∫•u ch·∫•m trong khi k·∫øt n·ªëi
    unsigned long startTime = millis();
    while (!Blynk.connected() && (millis() - startTime < 10000)) {
      Serial.print(".");
      delay(500);
    }
    
    if (Blynk.connected()) {
      isBlynkConnected = true;
      Serial.println("\n‚úÖ BLYNK ƒê√É K·∫æT N·ªêI TH√ÄNH C√îNG!");
      Serial.println("‚Ä¢ Template ID: " + String(BLYNK_TEMPLATE_ID));
      Serial.println("‚Ä¢ Template Name: " + String(BLYNK_TEMPLATE_NAME));
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã l√™n Blynk
      Blynk.virtualWrite(VPIN_SYSTEM_STATUS, "Thi·∫øt b·ªã tr·ª±c tuy·∫øn");
      Serial.println("‚Ä¢ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i l√™n Blynk Cloud");
      
      // ƒê·ª£i th√™m 2 gi√¢y ƒë·ªÉ quan s√°t
      delay(2000);
    } else {
      Serial.println("\n‚ùå BLYNK K·∫æT N·ªêI KH√îNG TH√ÄNH C√îNG!");
      Serial.println("‚Ä¢ L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß Blynk");
      Serial.println("‚Ä¢ H·ªá th·ªëng s·∫Ω ti·∫øp t·ª•c v·∫≠n h√†nh ·ªü ch·∫ø ƒë·ªô ngo·∫°i tuy·∫øn");
      delay(2000); // ƒê·ª£i 2 gi√¢y ƒë·ªÉ quan s√°t th√¥ng b√°o l·ªói
    }
  } else {
    Serial.println("\n‚ùå WIFI K·∫æT N·ªêI KH√îNG TH√ÄNH C√îNG!");
    Serial.println("‚Ä¢ L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m·∫°ng WiFi");
    Serial.println("‚Ä¢ Vui l√≤ng ki·ªÉm tra SSID v√† m·∫≠t kh·∫©u");
    Serial.println("‚Ä¢ H·ªá th·ªëng s·∫Ω ti·∫øp t·ª•c v·∫≠n h√†nh ·ªü ch·∫ø ƒë·ªô ngo·∫°i tuy·∫øn");
    delay(3000); // ƒê·ª£i 3 gi√¢y ƒë·ªÉ quan s√°t th√¥ng b√°o l·ªói
  }
  
  Serial.println("\n------------------------------------");
  Serial.println("QU√Å TR√åNH K·∫æT N·ªêI HO√ÄN T·∫§T");
  Serial.println("------------------------------------");
  delay(1000); // Delay cu·ªëi c√πng
  
  lastConnectionAttempt = millis();
}

// H√†m ki·ªÉm tra v√† duy tr√¨ k·∫øt n·ªëi
void checkConnection() {
  // Ki·ªÉm tra tr·∫°ng th√°i WiFi
  if (WiFi.status() != WL_CONNECTED) {
    if (isWifiConnected) {
      isWifiConnected = false;
      isBlynkConnected = false;
      Serial.println("‚ùå WiFi b·ªã ng·∫Øt k·∫øt n·ªëi!");
    }
    
    // Th·ª≠ k·∫øt n·ªëi l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
    if (millis() - lastConnectionAttempt > reconnectInterval) {
      Serial.println("üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...");
      connectToNetwork();
    }
  }
  
  // Ki·ªÉm tra k·∫øt n·ªëi Blynk (n·∫øu WiFi ƒë√£ k·∫øt n·ªëi)
  if (isWifiConnected && !isBlynkConnected) {
    // Th·ª≠ k·∫øt n·ªëi l·∫°i Blynk n·∫øu ƒë√£ ƒë·ªß th·ªùi gian
    if (millis() - lastConnectionAttempt > reconnectInterval) {
      Serial.print("üîÑ Th·ª≠ k·∫øt n·ªëi l·∫°i Blynk... ");
      if (Blynk.connect(5000)) {
        isBlynkConnected = true;
        Serial.println("‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i!");
        Blynk.virtualWrite(VPIN_SYSTEM_STATUS, "Thi·∫øt b·ªã tr·ª±c tuy·∫øn");
      } else {
        Serial.println("‚ùå Kh√¥ng th√†nh c√¥ng");
      }
      lastConnectionAttempt = millis();
    }
  }
}